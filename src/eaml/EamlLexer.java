/* The following code was generated by JFlex 1.4.3 on 1/28/16 8:26 AM */

package eaml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import eaml.psi.EamlTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/28/16 8:26 AM from the specification file
 * <tt>/Users/fernandohur/clojure/eaml-idea/src/eaml/parser/eaml.flex</tt>
 */
class EamlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\3\1\2\1\0\1\3\1\1\16\31\4\0\1\3\1\0"+
    "\1\11\1\5\1\30\1\0\1\46\1\0\1\42\1\43\4\0\1\44"+
    "\1\4\1\7\11\10\1\37\1\0\1\45\3\0\1\0\6\6\24\30"+
    "\4\0\1\30\1\0\1\17\1\34\1\32\1\22\1\15\1\16\1\35"+
    "\1\30\1\26\2\30\1\20\1\25\1\27\1\33\1\23\1\30\1\13"+
    "\1\21\1\12\1\14\1\30\1\30\1\24\1\36\1\30\1\40\1\0"+
    "\1\41\1\0\41\31\2\0\4\30\4\0\1\30\2\0\1\31\7\0"+
    "\1\30\4\0\1\30\5\0\27\30\1\0\37\30\1\0\u01ca\30\4\0"+
    "\14\30\16\0\5\30\7\0\1\30\1\0\1\30\21\0\160\31\5\30"+
    "\1\0\2\30\2\0\4\30\10\0\1\30\1\0\3\30\1\0\1\30"+
    "\1\0\24\30\1\0\123\30\1\0\213\30\1\0\5\31\2\0\236\30"+
    "\11\0\46\30\2\0\1\30\7\0\47\30\7\0\1\30\1\0\55\31"+
    "\1\0\1\31\1\0\2\31\1\0\2\31\1\0\1\31\10\0\33\30"+
    "\5\0\3\30\15\0\5\31\6\0\1\30\4\0\13\31\5\0\53\30"+
    "\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\0\6\31"+
    "\2\30\2\31\1\0\4\31\2\30\12\31\3\30\2\0\1\30\17\0"+
    "\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31\1\30\16\0"+
    "\12\31\41\30\11\31\2\30\4\0\1\30\5\0\26\30\4\31\1\30"+
    "\11\31\1\30\3\31\1\30\5\31\22\0\31\30\3\31\104\0\1\30"+
    "\1\0\13\30\67\0\33\31\1\0\4\31\66\30\3\31\1\30\22\31"+
    "\1\30\7\31\12\30\2\31\2\0\12\31\1\0\7\30\1\0\7\30"+
    "\1\0\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\1\30\3\0\4\30\2\0\1\31\1\30\7\31\2\0\2\31"+
    "\2\0\3\31\1\30\10\0\1\31\4\0\2\30\1\0\3\30\2\31"+
    "\2\0\12\31\4\30\7\0\1\30\5\0\3\31\1\0\6\30\4\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0"+
    "\2\30\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0"+
    "\1\31\7\0\4\30\1\0\1\30\7\0\14\31\3\30\1\31\13\0"+
    "\3\31\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\2\0\1\31\1\30\10\31\1\0\3\31\1\0"+
    "\3\31\2\0\1\30\17\0\2\30\2\31\2\0\12\31\1\0\1\30"+
    "\17\0\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\5\30\2\0\1\31\1\30\7\31\2\0\2\31"+
    "\2\0\3\31\10\0\2\31\4\0\2\30\1\0\3\30\2\31\2\0"+
    "\12\31\1\0\1\30\20\0\1\31\1\30\1\0\6\30\3\0\3\30"+
    "\1\0\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0\2\30"+
    "\3\0\3\30\3\0\14\30\4\0\5\31\3\0\3\31\1\0\4\31"+
    "\2\0\1\30\6\0\1\31\16\0\12\31\11\0\1\30\7\0\3\31"+
    "\1\0\10\30\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30"+
    "\3\0\1\30\7\31\1\0\3\31\1\0\4\31\7\0\2\31\1\0"+
    "\2\30\6\0\2\30\2\31\2\0\12\31\22\0\2\31\1\0\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30\2\0\1\31"+
    "\1\30\7\31\1\0\3\31\1\0\4\31\7\0\2\31\7\0\1\30"+
    "\1\0\2\30\2\31\2\0\12\31\1\0\2\30\17\0\2\31\1\0"+
    "\10\30\1\0\3\30\1\0\51\30\2\0\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\1\30\10\0\1\31\10\0\2\30\2\31\2\0\12\31"+
    "\12\0\6\30\2\0\2\31\1\0\22\30\3\0\30\30\1\0\11\30"+
    "\1\0\1\30\2\0\7\30\3\0\1\31\4\0\6\31\1\0\1\31"+
    "\1\0\10\31\22\0\2\31\15\0\60\30\1\31\2\30\7\31\4\0"+
    "\10\30\10\31\1\0\12\31\47\0\2\30\1\0\1\30\2\0\2\30"+
    "\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30"+
    "\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\31\2\30"+
    "\6\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0\6\31"+
    "\2\0\12\31\2\0\4\30\40\0\1\30\27\0\2\31\6\0\12\31"+
    "\13\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31\10\30\1\0"+
    "\44\30\4\0\24\31\1\0\2\31\5\30\13\31\1\0\44\31\11\0"+
    "\1\31\71\0\53\30\24\31\1\30\12\31\6\0\6\30\4\31\4\30"+
    "\3\31\1\30\3\31\2\30\7\31\3\30\4\31\15\30\14\31\1\30"+
    "\17\31\2\0\46\30\1\0\1\30\5\0\1\30\2\0\53\30\1\0"+
    "\u014d\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0\7\30\1\0"+
    "\1\30\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30\2\0"+
    "\103\30\2\0\3\31\40\0\20\30\20\0\125\30\14\0\u026c\30\2\0"+
    "\21\30\1\0\32\30\5\0\113\30\3\0\3\30\17\0\15\30\1\0"+
    "\4\30\3\31\13\0\22\30\3\31\13\0\22\30\2\31\14\0\15\30"+
    "\1\0\3\30\1\0\2\31\14\0\64\30\40\31\3\0\1\30\3\0"+
    "\2\30\1\31\2\0\12\31\41\0\3\31\2\0\12\31\6\0\130\30"+
    "\10\0\51\30\1\31\1\30\5\0\106\30\12\0\35\30\3\0\14\31"+
    "\4\0\14\31\12\0\12\31\36\30\2\0\5\30\13\0\54\30\4\0"+
    "\21\31\7\30\2\31\6\0\12\31\46\0\27\30\5\31\4\0\65\30"+
    "\12\31\1\0\35\31\2\0\13\31\6\0\12\31\15\0\1\30\130\0"+
    "\5\31\57\30\21\31\7\30\4\0\12\31\21\0\11\31\14\0\3\31"+
    "\36\30\15\31\2\30\12\31\54\30\16\31\14\0\44\30\24\31\10\0"+
    "\12\31\3\0\3\30\12\31\44\30\122\0\3\31\1\0\25\31\4\30"+
    "\1\31\4\30\3\31\2\30\11\0\300\30\47\31\25\0\4\31\u0116\30"+
    "\2\0\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30\1\0\7\30"+
    "\1\0\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0\6\30"+
    "\4\0\15\30\5\0\3\30\1\0\7\30\16\0\5\31\32\0\5\31"+
    "\20\0\2\30\23\0\1\30\13\0\5\31\5\0\6\31\1\0\1\30"+
    "\15\0\1\30\20\0\15\30\3\0\33\30\25\0\15\31\4\0\1\31"+
    "\3\0\14\31\21\0\1\30\4\0\1\30\2\0\12\30\1\0\1\30"+
    "\3\0\5\30\6\0\1\30\1\0\1\30\1\0\1\30\1\0\4\30"+
    "\1\0\13\30\2\0\4\30\5\0\5\30\4\0\1\30\21\0\51\30"+
    "\u0a77\0\57\30\1\0\57\30\1\0\205\30\6\0\4\30\3\31\2\30"+
    "\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30\7\0\1\30"+
    "\17\0\1\31\27\30\11\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\40\31\57\0\1\30\u01d5\0\3\30\31\0\11\30\6\31\1\0\5\30"+
    "\2\0\5\30\4\0\126\30\2\0\2\31\2\0\3\30\1\0\132\30"+
    "\1\0\4\30\5\0\51\30\3\0\136\30\21\0\33\30\65\0\20\30"+
    "\u0200\0\u19b6\30\112\0\u51cd\30\63\0\u048d\30\103\0\56\30\2\0\u010d\30"+
    "\3\0\20\30\12\31\2\30\24\0\57\30\1\31\4\0\12\31\1\0"+
    "\31\30\7\0\1\31\120\30\2\31\45\0\11\30\2\0\147\30\2\0"+
    "\4\30\1\0\4\30\14\0\13\30\115\0\12\30\1\31\3\30\1\31"+
    "\4\30\1\31\27\30\5\31\20\0\1\30\7\0\64\30\14\0\2\31"+
    "\62\30\21\31\13\0\12\31\6\0\22\31\6\30\3\0\1\30\4\0"+
    "\12\31\34\30\10\31\2\0\27\30\15\31\14\0\35\30\3\0\4\31"+
    "\57\30\16\31\16\0\1\30\12\31\46\0\51\30\16\31\11\0\3\30"+
    "\1\31\10\30\2\31\2\0\12\31\6\0\27\30\3\0\1\30\1\31"+
    "\4\0\60\30\1\31\1\30\3\31\2\30\2\31\5\30\2\31\1\30"+
    "\1\31\1\30\30\0\3\30\2\0\13\30\5\31\2\0\3\30\2\31"+
    "\12\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30\1\0\7\30"+
    "\221\0\43\30\10\31\1\0\2\31\2\0\12\31\6\0\u2ba4\30\14\0"+
    "\27\30\4\0\61\30\u2104\0\u016e\30\2\0\152\30\46\0\7\30\14\0"+
    "\5\30\5\0\1\30\1\31\12\30\1\0\15\30\1\0\5\30\1\0"+
    "\1\30\1\0\2\30\1\0\2\30\1\0\154\30\41\0\u016b\30\22\0"+
    "\100\30\2\0\66\30\50\0\15\30\3\0\20\31\20\0\7\31\14\0"+
    "\2\30\30\0\3\30\31\0\1\30\6\0\5\30\1\0\207\30\2\0"+
    "\1\31\4\0\1\30\13\0\12\31\7\0\32\30\4\0\1\30\1\0"+
    "\32\30\13\0\131\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0"+
    "\3\30\3\0\2\30\3\0\2\30\22\0\3\31\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\2\4\1\1\11\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\6\0\1\16\11\3\2\15\1\0\1\17\12\3"+
    "\1\20\1\21\5\3\1\22\1\3\1\23\1\20\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\20\1\30\1\3"+
    "\1\20\1\31\2\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\47\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\47\0\47\0\47\0\47\0\47"+
    "\0\47\0\47\0\47\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u0138\0\u0138\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\47\0\u052e\0\47"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\303\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\303\0\u07c5\0\303\0\u07ec\0\u0813\0\303\0\303"+
    "\0\303\0\u083a\0\303\0\u0861\0\303\0\u0888\0\u08af\0\303"+
    "\0\u08d6\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\3\7\1\14\2\7\1\15\1\16\2\7"+
    "\1\17\1\20\1\21\1\7\1\2\1\22\1\7\1\23"+
    "\2\7\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\51\0\1\4\50\0\1\34\50\0\3\35\4\0"+
    "\3\35\2\0\1\35\7\0\1\35\1\0\1\35\20\0"+
    "\3\7\1\0\25\7\31\0\2\36\1\37\1\0\1\40"+
    "\1\41\27\0\2\11\10\0\2\36\1\37\1\0\1\40"+
    "\1\41\20\0\2\42\1\0\6\42\1\43\35\42\6\0"+
    "\3\7\1\0\1\7\1\44\23\7\16\0\3\7\1\0"+
    "\5\7\1\45\17\7\16\0\3\7\1\0\1\46\24\7"+
    "\16\0\3\7\1\0\14\7\1\47\10\7\16\0\3\7"+
    "\1\0\14\7\1\50\10\7\16\0\3\7\1\0\15\7"+
    "\1\51\7\7\16\0\3\7\1\0\2\7\1\52\22\7"+
    "\16\0\3\7\1\0\21\7\1\53\3\7\16\0\3\7"+
    "\1\0\21\7\1\54\3\7\10\0\1\34\1\55\1\56"+
    "\44\34\6\0\3\57\4\0\3\57\2\0\1\57\7\0"+
    "\1\57\1\0\1\57\35\0\1\60\35\0\1\60\11\0"+
    "\1\60\47\0\1\60\50\0\1\60\25\0\3\7\1\0"+
    "\2\7\1\61\22\7\16\0\3\7\1\0\6\7\1\62"+
    "\16\7\16\0\3\7\1\0\1\7\1\63\22\7\1\64"+
    "\16\0\3\7\1\0\13\7\1\65\11\7\16\0\3\7"+
    "\1\0\12\7\1\66\12\7\16\0\3\7\1\0\1\67"+
    "\24\7\16\0\3\7\1\0\6\7\1\70\16\7\16\0"+
    "\3\7\1\0\6\7\1\71\16\7\16\0\3\7\1\0"+
    "\21\7\1\72\3\7\12\0\1\56\52\0\3\73\4\0"+
    "\3\73\2\0\1\73\7\0\1\73\1\0\1\73\20\0"+
    "\3\7\1\0\3\7\1\74\21\7\16\0\3\7\1\0"+
    "\7\7\1\61\15\7\16\0\3\7\1\0\14\7\1\75"+
    "\10\7\16\0\3\7\1\0\6\7\1\76\16\7\16\0"+
    "\3\7\1\0\3\7\1\77\21\7\16\0\3\7\1\0"+
    "\14\7\1\100\10\7\16\0\3\7\1\0\3\7\1\101"+
    "\21\7\16\0\3\7\1\0\6\7\1\102\16\7\16\0"+
    "\3\7\1\0\21\7\1\103\3\7\16\0\3\7\1\0"+
    "\6\7\1\104\16\7\16\0\3\105\4\0\3\105\2\0"+
    "\1\105\7\0\1\105\1\0\1\105\20\0\3\7\1\0"+
    "\15\7\1\106\7\7\16\0\3\7\1\0\3\7\1\107"+
    "\21\7\16\0\3\7\1\0\15\7\1\110\7\7\16\0"+
    "\3\7\1\0\15\7\1\111\7\7\16\0\3\7\1\0"+
    "\23\7\1\112\1\7\16\0\3\7\1\0\1\7\1\113"+
    "\23\7\16\0\3\114\4\0\3\114\2\0\1\114\7\0"+
    "\1\114\1\0\1\114\20\0\3\7\1\0\23\7\1\115"+
    "\1\7\16\0\3\7\1\0\3\7\1\116\21\7\16\0"+
    "\3\117\4\0\3\117\2\0\1\117\7\0\1\117\1\0"+
    "\1\117\20\0\3\7\1\0\1\7\1\120\23\7\16\0"+
    "\3\121\4\0\3\121\2\0\1\121\7\0\1\121\1\0"+
    "\1\121\20\0\3\122\4\0\3\122\2\0\1\122\7\0"+
    "\1\122\1\0\1\122\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\17\1\10\11\1\1\6\0"+
    "\13\1\1\11\1\0\1\11\41\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  EamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return EamlTypes.LT;
          }
        case 26: break;
        case 14: 
          { return EamlTypes.STRING_LITERAL;
          }
        case 27: break;
        case 18: 
          { return EamlTypes.NULL;
          }
        case 28: break;
        case 10: 
          { return EamlTypes.DOT;
          }
        case 29: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 30: break;
        case 12: 
          { return EamlTypes.AMP;
          }
        case 31: break;
        case 3: 
          { return EamlTypes.RES_IDEN;
          }
        case 32: break;
        case 13: 
          { /* comments are ignored */
          }
        case 33: break;
        case 9: 
          { return EamlTypes.R_PR;
          }
        case 34: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 35: break;
        case 19: 
          { return EamlTypes.BOOL;
          }
        case 36: break;
        case 7: 
          { return EamlTypes.R_BR;
          }
        case 37: break;
        case 15: 
          { return EamlTypes.DIMEN_LITERAL;
          }
        case 38: break;
        case 25: 
          { return EamlTypes.INTEGER;
          }
        case 39: break;
        case 22: 
          { return EamlTypes.MIXIN;
          }
        case 40: break;
        case 21: 
          { return EamlTypes.DIMEN;
          }
        case 41: break;
        case 8: 
          { return EamlTypes.L_PR;
          }
        case 42: break;
        case 24: 
          { return EamlTypes.STRING;
          }
        case 43: break;
        case 5: 
          { return EamlTypes.ASSIGNMENT;
          }
        case 44: break;
        case 4: 
          { return EamlTypes.INTEGER_LITERAL;
          }
        case 45: break;
        case 6: 
          { return EamlTypes.L_BR;
          }
        case 46: break;
        case 20: 
          { return EamlTypes.STYLE;
          }
        case 47: break;
        case 16: 
          { return EamlTypes.COLOR_LITERAL;
          }
        case 48: break;
        case 23: 
          { return EamlTypes.COLOR;
          }
        case 49: break;
        case 17: 
          { return EamlTypes.BOOL_LITERAL;
          }
        case 50: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
