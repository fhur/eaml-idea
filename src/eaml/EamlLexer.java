/* The following code was generated by JFlex 1.4.3 on 1/24/16 7:29 PM */

package eaml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import eaml.psi.EamlTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/24/16 7:29 PM from the specification file
 * <tt>/Users/fernandohur/clojure/eaml-idea/src/eaml/parser/eaml.flex</tt>
 */
class EamlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\25\1\3\1\2\1\0\1\3\1\1\16\25\4\0\1\3\1\0"+
    "\1\10\1\4\1\24\13\0\1\6\11\7\1\35\1\36\5\0\6\5"+
    "\24\24\4\0\1\24\1\0\1\16\1\33\1\26\1\21\1\14\1\15"+
    "\1\34\1\24\1\30\2\24\1\17\1\31\1\32\1\27\1\22\1\24"+
    "\1\12\1\20\1\11\1\13\2\24\1\23\2\24\4\0\41\25\2\0"+
    "\4\24\4\0\1\24\2\0\1\25\7\0\1\24\4\0\1\24\5\0"+
    "\27\24\1\0\37\24\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0"+
    "\1\24\1\0\1\24\21\0\160\25\5\24\1\0\2\24\2\0\4\24"+
    "\10\0\1\24\1\0\3\24\1\0\1\24\1\0\24\24\1\0\123\24"+
    "\1\0\213\24\1\0\5\25\2\0\236\24\11\0\46\24\2\0\1\24"+
    "\7\0\47\24\7\0\1\24\1\0\55\25\1\0\1\25\1\0\2\25"+
    "\1\0\2\25\1\0\1\25\10\0\33\24\5\0\3\24\15\0\5\25"+
    "\6\0\1\24\4\0\13\25\5\0\53\24\37\25\4\0\2\24\1\25"+
    "\143\24\1\0\1\24\10\25\1\0\6\25\2\24\2\25\1\0\4\25"+
    "\2\24\12\25\3\24\2\0\1\24\17\0\1\25\1\24\1\25\36\24"+
    "\33\25\2\0\131\24\13\25\1\24\16\0\12\25\41\24\11\25\2\24"+
    "\4\0\1\24\5\0\26\24\4\25\1\24\11\25\1\24\3\25\1\24"+
    "\5\25\22\0\31\24\3\25\104\0\1\24\1\0\13\24\67\0\33\25"+
    "\1\0\4\25\66\24\3\25\1\24\22\25\1\24\7\25\12\24\2\25"+
    "\2\0\12\25\1\0\7\24\1\0\7\24\1\0\3\25\1\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\1\24\3\0\4\24"+
    "\2\0\1\25\1\24\7\25\2\0\2\25\2\0\3\25\1\24\10\0"+
    "\1\25\4\0\2\24\1\0\3\24\2\25\2\0\12\25\4\24\7\0"+
    "\1\24\5\0\3\25\1\0\6\24\4\0\2\24\2\0\26\24\1\0"+
    "\7\24\1\0\2\24\1\0\2\24\1\0\2\24\2\0\1\25\1\0"+
    "\5\25\4\0\2\25\2\0\3\25\3\0\1\25\7\0\4\24\1\0"+
    "\1\24\7\0\14\25\3\24\1\25\13\0\3\25\1\0\11\24\1\0"+
    "\3\24\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24\2\0"+
    "\1\25\1\24\10\25\1\0\3\25\1\0\3\25\2\0\1\24\17\0"+
    "\2\24\2\25\2\0\12\25\1\0\1\24\17\0\3\25\1\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24"+
    "\2\0\1\25\1\24\7\25\2\0\2\25\2\0\3\25\10\0\2\25"+
    "\4\0\2\24\1\0\3\24\2\25\2\0\12\25\1\0\1\24\20\0"+
    "\1\25\1\24\1\0\6\24\3\0\3\24\1\0\4\24\3\0\2\24"+
    "\1\0\1\24\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24"+
    "\4\0\5\25\3\0\3\25\1\0\4\25\2\0\1\24\6\0\1\25"+
    "\16\0\12\25\11\0\1\24\7\0\3\25\1\0\10\24\1\0\3\24"+
    "\1\0\27\24\1\0\12\24\1\0\5\24\3\0\1\24\7\25\1\0"+
    "\3\25\1\0\4\25\7\0\2\25\1\0\2\24\6\0\2\24\2\25"+
    "\2\0\12\25\22\0\2\25\1\0\10\24\1\0\3\24\1\0\27\24"+
    "\1\0\12\24\1\0\5\24\2\0\1\25\1\24\7\25\1\0\3\25"+
    "\1\0\4\25\7\0\2\25\7\0\1\24\1\0\2\24\2\25\2\0"+
    "\12\25\1\0\2\24\17\0\2\25\1\0\10\24\1\0\3\24\1\0"+
    "\51\24\2\0\1\24\7\25\1\0\3\25\1\0\4\25\1\24\10\0"+
    "\1\25\10\0\2\24\2\25\2\0\12\25\12\0\6\24\2\0\2\25"+
    "\1\0\22\24\3\0\30\24\1\0\11\24\1\0\1\24\2\0\7\24"+
    "\3\0\1\25\4\0\6\25\1\0\1\25\1\0\10\25\22\0\2\25"+
    "\15\0\60\24\1\25\2\24\7\25\4\0\10\24\10\25\1\0\12\25"+
    "\47\0\2\24\1\0\1\24\2\0\2\24\1\0\1\24\2\0\1\24"+
    "\6\0\4\24\1\0\7\24\1\0\3\24\1\0\1\24\1\0\1\24"+
    "\2\0\2\24\1\0\4\24\1\25\2\24\6\25\1\0\2\25\1\24"+
    "\2\0\5\24\1\0\1\24\1\0\6\25\2\0\12\25\2\0\4\24"+
    "\40\0\1\24\27\0\2\25\6\0\12\25\13\0\1\25\1\0\1\25"+
    "\1\0\1\25\4\0\2\25\10\24\1\0\44\24\4\0\24\25\1\0"+
    "\2\25\5\24\13\25\1\0\44\25\11\0\1\25\71\0\53\24\24\25"+
    "\1\24\12\25\6\0\6\24\4\25\4\24\3\25\1\24\3\25\2\24"+
    "\7\25\3\24\4\25\15\24\14\25\1\24\17\25\2\0\46\24\1\0"+
    "\1\24\5\0\1\24\2\0\53\24\1\0\u014d\24\1\0\4\24\2\0"+
    "\7\24\1\0\1\24\1\0\4\24\2\0\51\24\1\0\4\24\2\0"+
    "\41\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0"+
    "\17\24\1\0\71\24\1\0\4\24\2\0\103\24\2\0\3\25\40\0"+
    "\20\24\20\0\125\24\14\0\u026c\24\2\0\21\24\1\0\32\24\5\0"+
    "\113\24\3\0\3\24\17\0\15\24\1\0\4\24\3\25\13\0\22\24"+
    "\3\25\13\0\22\24\2\25\14\0\15\24\1\0\3\24\1\0\2\25"+
    "\14\0\64\24\40\25\3\0\1\24\3\0\2\24\1\25\2\0\12\25"+
    "\41\0\3\25\2\0\12\25\6\0\130\24\10\0\51\24\1\25\1\24"+
    "\5\0\106\24\12\0\35\24\3\0\14\25\4\0\14\25\12\0\12\25"+
    "\36\24\2\0\5\24\13\0\54\24\4\0\21\25\7\24\2\25\6\0"+
    "\12\25\46\0\27\24\5\25\4\0\65\24\12\25\1\0\35\25\2\0"+
    "\13\25\6\0\12\25\15\0\1\24\130\0\5\25\57\24\21\25\7\24"+
    "\4\0\12\25\21\0\11\25\14\0\3\25\36\24\15\25\2\24\12\25"+
    "\54\24\16\25\14\0\44\24\24\25\10\0\12\25\3\0\3\24\12\25"+
    "\44\24\122\0\3\25\1\0\25\25\4\24\1\25\4\24\3\25\2\24"+
    "\11\0\300\24\47\25\25\0\4\25\u0116\24\2\0\6\24\2\0\46\24"+
    "\2\0\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\37\24\2\0\65\24\1\0\7\24\1\0\1\24\3\0\3\24"+
    "\1\0\7\24\3\0\4\24\2\0\6\24\4\0\15\24\5\0\3\24"+
    "\1\0\7\24\16\0\5\25\32\0\5\25\20\0\2\24\23\0\1\24"+
    "\13\0\5\25\5\0\6\25\1\0\1\24\15\0\1\24\20\0\15\24"+
    "\3\0\33\24\25\0\15\25\4\0\1\25\3\0\14\25\21\0\1\24"+
    "\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24\6\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\4\24\1\0\13\24\2\0\4\24"+
    "\5\0\5\24\4\0\1\24\21\0\51\24\u0a77\0\57\24\1\0\57\24"+
    "\1\0\205\24\6\0\4\24\3\25\2\24\14\0\46\24\1\0\1\24"+
    "\5\0\1\24\2\0\70\24\7\0\1\24\17\0\1\25\27\24\11\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\40\25\57\0\1\24\u01d5\0"+
    "\3\24\31\0\11\24\6\25\1\0\5\24\2\0\5\24\4\0\126\24"+
    "\2\0\2\25\2\0\3\24\1\0\132\24\1\0\4\24\5\0\51\24"+
    "\3\0\136\24\21\0\33\24\65\0\20\24\u0200\0\u19b6\24\112\0\u51cd\24"+
    "\63\0\u048d\24\103\0\56\24\2\0\u010d\24\3\0\20\24\12\25\2\24"+
    "\24\0\57\24\1\25\4\0\12\25\1\0\31\24\7\0\1\25\120\24"+
    "\2\25\45\0\11\24\2\0\147\24\2\0\4\24\1\0\4\24\14\0"+
    "\13\24\115\0\12\24\1\25\3\24\1\25\4\24\1\25\27\24\5\25"+
    "\20\0\1\24\7\0\64\24\14\0\2\25\62\24\21\25\13\0\12\25"+
    "\6\0\22\25\6\24\3\0\1\24\4\0\12\25\34\24\10\25\2\0"+
    "\27\24\15\25\14\0\35\24\3\0\4\25\57\24\16\25\16\0\1\24"+
    "\12\25\46\0\51\24\16\25\11\0\3\24\1\25\10\24\2\25\2\0"+
    "\12\25\6\0\27\24\3\0\1\24\1\25\4\0\60\24\1\25\1\24"+
    "\3\25\2\24\2\25\5\24\2\25\1\24\1\25\1\24\30\0\3\24"+
    "\2\0\13\24\5\25\2\0\3\24\2\25\12\0\6\24\2\0\6\24"+
    "\2\0\6\24\11\0\7\24\1\0\7\24\221\0\43\24\10\25\1\0"+
    "\2\25\2\0\12\25\6\0\u2ba4\24\14\0\27\24\4\0\61\24\u2104\0"+
    "\u016e\24\2\0\152\24\46\0\7\24\14\0\5\24\5\0\1\24\1\25"+
    "\12\24\1\0\15\24\1\0\5\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\0\154\24\41\0\u016b\24\22\0\100\24\2\0\66\24\50\0"+
    "\15\24\3\0\20\25\20\0\7\25\14\0\2\24\30\0\3\24\31\0"+
    "\1\24\6\0\5\24\1\0\207\24\2\0\1\25\4\0\1\24\13\0"+
    "\12\25\7\0\32\24\4\0\1\24\1\0\32\24\13\0\131\24\3\0"+
    "\6\24\2\0\6\24\2\0\6\24\2\0\3\24\3\0\2\24\3\0"+
    "\2\24\22\0\3\25\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\2\4\1\1\7\3"+
    "\1\5\1\6\4\0\1\7\7\3\1\0\1\10\7\3"+
    "\1\11\1\12\4\3\1\13\1\11\1\3\1\14\1\15"+
    "\1\3\1\11\1\16\1\3\1\11\1\17\2\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\37\0\135\0\174\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\37\0\37\0\u01d1\0\u01f0\0\u020f\0\331\0\331\0\u022e"+
    "\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\37"+
    "\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\u03ff"+
    "\0\174\0\u041e\0\u043d\0\u045c\0\u047b\0\174\0\u049a\0\u04b9"+
    "\0\174\0\174\0\u04d8\0\u04f7\0\174\0\u0516\0\u0535\0\174"+
    "\0\u0554\0\37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\3\6\1\13\2\6\1\14\1\15\3\6\1\2"+
    "\1\16\1\6\1\17\2\6\1\20\1\6\1\21\1\22"+
    "\41\0\1\4\41\0\3\23\4\0\3\23\2\0\1\23"+
    "\4\0\1\23\4\0\1\23\10\0\3\6\1\0\24\6"+
    "\22\0\2\24\1\25\22\0\2\10\10\0\2\24\1\25"+
    "\14\0\2\26\1\0\5\26\1\27\26\26\5\0\3\6"+
    "\1\0\1\6\1\30\22\6\7\0\3\6\1\0\5\6"+
    "\1\31\16\6\7\0\3\6\1\0\1\32\23\6\7\0"+
    "\3\6\1\0\17\6\1\33\4\6\7\0\3\6\1\0"+
    "\16\6\1\34\5\6\7\0\3\6\1\0\21\6\1\35"+
    "\2\6\7\0\3\6\1\0\16\6\1\36\5\6\7\0"+
    "\3\37\4\0\3\37\2\0\1\37\4\0\1\37\4\0"+
    "\1\37\25\0\1\40\37\0\1\40\20\0\3\6\1\0"+
    "\2\6\1\41\21\6\7\0\3\6\1\0\6\6\1\42"+
    "\15\6\7\0\3\6\1\0\1\6\1\43\22\6\7\0"+
    "\3\6\1\0\20\6\1\44\3\6\7\0\3\6\1\0"+
    "\6\6\1\45\15\6\7\0\3\6\1\0\1\46\23\6"+
    "\7\0\3\6\1\0\16\6\1\47\5\6\7\0\3\50"+
    "\4\0\3\50\2\0\1\50\4\0\1\50\4\0\1\50"+
    "\10\0\3\6\1\0\3\6\1\51\20\6\7\0\3\6"+
    "\1\0\7\6\1\41\14\6\7\0\3\6\1\0\17\6"+
    "\1\52\4\6\7\0\3\6\1\0\3\6\1\53\20\6"+
    "\7\0\3\6\1\0\16\6\1\54\5\6\7\0\3\6"+
    "\1\0\3\6\1\55\20\6\7\0\3\6\1\0\6\6"+
    "\1\56\15\6\7\0\3\57\4\0\3\57\2\0\1\57"+
    "\4\0\1\57\4\0\1\57\10\0\3\6\1\0\21\6"+
    "\1\60\2\6\7\0\3\6\1\0\21\6\1\61\2\6"+
    "\7\0\3\6\1\0\1\6\1\62\22\6\7\0\3\6"+
    "\1\0\23\6\1\63\7\0\3\64\4\0\3\64\2\0"+
    "\1\64\4\0\1\64\4\0\1\64\10\0\3\6\1\0"+
    "\23\6\1\65\7\0\3\6\1\0\3\6\1\66\20\6"+
    "\7\0\3\67\4\0\3\67\2\0\1\67\4\0\1\67"+
    "\4\0\1\67\10\0\3\6\1\0\1\6\1\70\22\6"+
    "\7\0\3\71\4\0\3\71\2\0\1\71\4\0\1\71"+
    "\4\0\1\71\10\0\3\72\4\0\3\72\2\0\1\72"+
    "\4\0\1\72\4\0\1\72\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\14\1\2\11\4\0\10\1"+
    "\1\0\1\11\31\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  EamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { System.out.println("matched :"); return EamlTypes.ASSIGNMENT;
          }
        case 16: break;
        case 4: 
          { return EamlTypes.INTEGER_LITERAL;
          }
        case 17: break;
        case 8: 
          { return EamlTypes.DIMEN_LITERAL;
          }
        case 18: break;
        case 15: 
          { return EamlTypes.INTEGER;
          }
        case 19: break;
        case 13: 
          { System.out.println("matched color"); return EamlTypes.COLOR;
          }
        case 20: break;
        case 9: 
          { return EamlTypes.COLOR_LITERAL;
          }
        case 21: break;
        case 10: 
          { return EamlTypes.BOOL_LITERAL;
          }
        case 22: break;
        case 6: 
          { System.out.println("matched ;"); return EamlTypes.LTERM;
          }
        case 23: break;
        case 2: 
          { System.out.println("matched whitespace");
          }
        case 24: break;
        case 3: 
          { System.out.println("matched ColorIden ;"); return EamlTypes.COLOR_IDEN;
          }
        case 25: break;
        case 7: 
          { return EamlTypes.STRING_LITERAL;
          }
        case 26: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 27: break;
        case 14: 
          { return EamlTypes.STRING;
          }
        case 28: break;
        case 12: 
          { return EamlTypes.DIMEN;
          }
        case 29: break;
        case 11: 
          { return EamlTypes.BOOL;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
